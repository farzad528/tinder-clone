{"version":3,"sources":["Header.js","firebase.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TinderCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","name","preventSwipe","style","backgroundImage","url","Swipebuttons","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","placeholder","type","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4946167f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport ForumIcon from \"@material-ui/icons/Forum\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction Header({ backButton }) {\r\n  const history = useHistory();\r\n  return (\r\n    // BEM\r\n    <div className=\"header\">\r\n      {backButton ? (\r\n        <IconButton onClick={() => history.replace(backButton)}>\r\n          <ArrowBackIosIcon\r\n            fontSize=\"large\"\r\n            className=\"header_icon\"\r\n          ></ArrowBackIosIcon>\r\n        </IconButton>\r\n      ) : (\r\n        <IconButton>\r\n          <PersonIcon className=\"header__icon\" fontSize=\"large\" />\r\n        </IconButton>\r\n      )}\r\n\r\n      <Link to=\"/\">\r\n        <img\r\n          className=\"header__logo\"\r\n          src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\r\n          alt=\"tinder logo\"\r\n        />\r\n      </Link>\r\n      <Link to=\"/chat\">\r\n        <IconButton>\r\n          <ForumIcon className=\"header__icon\" fontSize=\"large\" />\r\n        </IconButton>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDmGYwtIrnoF21VzmDAUy6Fw0Oe63VGQjU\",\r\n  authDomain: \"tinder-clone-1b8a5.firebaseapp.com\",\r\n  databaseURL: \"https://tinder-clone-1b8a5.firebaseio.com\",\r\n  projectId: \"tinder-clone-1b8a5\",\r\n  storageBucket: \"tinder-clone-1b8a5.appspot.com\",\r\n  messagingSenderId: \"392731349136\",\r\n  appId: \"1:392731349136:web:09e806ed27a1452b7b4815\",\r\n  measurementId: \"G-TPQSFZK61G\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\n\r\nexport default database;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport database from \"./firebase\";\r\nimport \"./TinderCards.css\";\r\n\r\nfunction TinderCards() {\r\n  const [people, setPeople] = useState([]);\r\n\r\n  // Piece of code which runs based on a condition\r\n  useEffect(() => {\r\n    // this is where the code runs...\r\n\r\n    const unsubscribe = database\r\n      .collection(\"people\")\r\n      .onSnapshot((snapshot) =>\r\n        setPeople(snapshot.docs.map((doc) => doc.data()))\r\n      );\r\n\r\n    return () => {\r\n      // this is a cleanup...\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  //   BAD\r\n  //      const people = []\r\n  //     people.push('farzad', 'phil')\r\n\r\n  //   GOOD (Push to an array in REACT)\r\n  //   setPeople([...people, 'farzad', 'phil'])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"tinderCards__cardContainer\">\r\n        {people.map((person) => (\r\n          <TinderCard\r\n            className=\"swipe\"\r\n            key={person.name}\r\n            preventSwipe={[\"up\", \"down\"]}\r\n          >\r\n            <div\r\n              style={{ backgroundImage: `url(${person.url})` }}\r\n              className=\"card\"\r\n            >\r\n              <h3>{person.name}</h3>\r\n            </div>\r\n          </TinderCard>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TinderCards;\r\n","import React from \"react\";\r\nimport \"./SwipeButtons.css\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nfunction Swipebuttons() {\r\n  return (\r\n    <div className=\"swipeButtons\">\r\n      <IconButton className=\"swipeButtons__repeat\">\r\n        <ReplayIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__left\">\r\n        <CloseIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__star\">\r\n        <StarRateIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__right\">\r\n        <FavoriteIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__lightning\">\r\n        <FlashOnIcon fontSize=\"large\" />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Swipebuttons;\r\n","import React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport \"./Chat.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Chat({ name, message, profilePic, timestamp }) {\r\n  return (\r\n    <Link to={`/chat/${name}`}>\r\n      <div className=\"chat\">\r\n        <Avatar className=\"chat__image\" src={profilePic} />\r\n        <div className=\"chat__details\">\r\n          <h2>{name}</h2>\r\n          <p>{message}</p>\r\n        </div>\r\n        <p className=\"chat__timestamp\">{timestamp}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport \"./Chats.css\";\r\nimport Chat from \"./Chat\";\r\n\r\nfunction Chats() {\r\n  return (\r\n    <div className=\"chats\">\r\n      <Chat\r\n        name=\"LeBron\"\r\n        message=\"I am the best player in the world 👑\"\r\n        timestamp=\"40 seconds ago\"\r\n        profilePic=\"https://www.biography.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cg_face%2Cq_auto:good%2Cw_300/MTY2NzA3MjE1MzQyNzczNTQw/lebron-james-photo-by-streeter-lecka_getty-images.jpg\"\r\n      />\r\n      <Chat\r\n        name=\"Stephen\"\r\n        message=\"I blew a 3-1 lead 😢\"\r\n        timestamp=\"55 minutes ago\"\r\n        profilePic=\"https://imageproxy.themaven.net//https%3A%2F%2Fwww.biography.com%2F.image%2FMTM5OTQxMjg1NzA3MzkyMDQw%2Fstephen-curry-gettyimages-538912798_1600jpg.jpg\"\r\n      />\r\n      <Chat\r\n        name=\"Michael\"\r\n        message=\"I am the 🐐\"\r\n        timestamp=\"3 days ago\"\r\n        profilePic=\"https://www.biography.com/.image/t_share/MTY2Njc5NDYzOTQ4NDYxNDA4/michael-jordan.jpg\"\r\n      />\r\n      <Chat\r\n        name=\"Kawhi\"\r\n        message=\"Board man 🏀\"\r\n        timestamp=\"1 week ago\"\r\n        profilePic=\"https://s.yimg.com/uu/api/res/1.2/i6EIhC6mWLhuXOjwQgmiYg--~B/aD0xMDgwO3c9MTkyMDtzbT0xO2FwcGlkPXl0YWNoeW9u/https://media.zenfs.com/en/omnisport.uk/78a5b9d25dd7bfed22d8d42bed0f4ee9\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chats;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport \"./ChatScreen.css\";\r\n\r\nfunction ChatScreen() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      name: \"Lebron\",\r\n      image:\r\n        \"https://www.biography.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cg_face%2Cq_auto:good%2Cw_300/MTY2NzA3MjE1MzQyNzczNTQw/lebron-james-photo-by-streeter-lecka_getty-images.jpg\",\r\n      message: \"Whats up ❤️\",\r\n    },\r\n    {\r\n      name: \"Lebron\",\r\n      image:\r\n        \"https://www.biography.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cg_face%2Cq_auto:good%2Cw_300/MTY2NzA3MjE1MzQyNzczNTQw/lebron-james-photo-by-streeter-lecka_getty-images.jpg\",\r\n      message: \"You think I'm the G.O.A.T?\",\r\n    },\r\n    {\r\n      message: \"Nope, Kevin Durant!\",\r\n    },\r\n  ]);\r\n\r\n  const handleSend = (e) => {\r\n    e.preventDefault();\r\n\r\n    setMessages([...messages, { message: input }]);\r\n    setInput(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"chatScreen\">\r\n      <p className=\"chatScreen__timestamp\">\r\n        YOU MATCHED WITH LEBRON ON 11/11/2020\r\n      </p>\r\n      {messages.map((message) =>\r\n        message.name ? (\r\n          <div className=\"chatScreen__message\">\r\n            <Avatar\r\n              className=\"chatScreen__image\"\r\n              alt={message.name}\r\n              src={message.image}\r\n            />\r\n            <p className=\"chatScreen__text\">{message.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"chatScreen__message\">\r\n            <p className=\"chatScreen__textUser\">{message.message}</p>\r\n          </div>\r\n        )\r\n      )}\r\n      <div>\r\n        <form className=\"chatScreen__input\">\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            className=\"chatScreen__inputField\"\r\n            placeholder=\"Type a message...\"\r\n            type=\"text\"\r\n          />\r\n          <button onClick={handleSend} className=\"chatScreen__inputButton\">\r\n            SEND\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatScreen;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport TinderCards from \"./TinderCards\";\nimport SwipeButtons from \"./SwipeButtons\";\nimport Firebase from \"./firebase\";\nimport Chats from \"./Chats\";\nimport ChatScreen from \"./ChatScreen\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n        <Route path=\"/chat/:person\">\n            <Header backButton=\"/chat\" />\n            <ChatScreen />\n          </Route>\n          <Route path=\"/chat\">\n            <Header backButton=\"/\" />\n            <Chats />\n          </Route>\n          <Route path=\"/\">\n            <Header />\n            <TinderCards />\n            <SwipeButtons />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n{\n  /* Tinder Cards */\n}\n{\n  /* Buttons below tinder cards */\n}\n\n{\n  /* Chats screen */\n}\n{\n  /* Individual chat screen */\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}